#include <bits/stdc++.h>
using namespace std;

int dp[1005][25005];
int b[1005];
int W[1005];
int v[1005];
vector<int>path_index;

int knapsack(int k, int w)
{
    if(k==0 || w==0)
        dp[k][w]=0;
    if(dp[k][w]!=-1)
        return dp[k][w];
    if(W[k]>w)
        dp[k][w]=knapsack(k-1,w);
    else
        dp[k][w]=max(b[k]+knapsack(k-1,w-W[k]),knapsack(k-1,w));
    return dp[k][w];
}

int main()
{
    int f=1;
    //int t;
    //scanf("%d",&t);
    int s=0,n,w;
    while(scanf("%d%d",&s,&w)==2)
    {
        if(f==0)
            printf("\n");
        else
            f=0;
        scanf("%d",&n);
        memset(dp,-1,sizeof(dp));
        for(int i=1;i<=n;i++)
        {
            scanf("%d%d",&v[i],&b[i]);
            W[i]=3*v[i]*w;
        }
        printf("%d\n",knapsack(n,s));
        while(n && s)
        {
            if(dp[n][s]!=dp[n-1][s])
            {
                path_index.push_back(n);
                s-=W[n];
            }
            n--;
        }
        printf("%d\n",path_index.size());
        for(int i=path_index.size()-1;i>=0;i--)
        {
            printf("%d %d\n",v[path_index[i]],b[path_index[i]]);
        }
        path_index.clear();
    }
}
