#include <bits/stdc++.h>
using namespace std;

int dp[25][205];
//int b[205];
int W[25];
//int v[205];
vector<int>path_index;

//int knapsack(int k, int w)
//{
//    if(k==0 || w==0)
//        dp[k][w]=0;
//    if(dp[k][w]!=-1)
//        return dp[k][w];
//    if(W[k]>w)
//        dp[k][w]=knapsack(k-1,w);
//    else
//        dp[k][w]=max(b[k]+knapsack(k-1,w-W[k]),knapsack(k-1,w));
//    return dp[k][w];
//}
int subsetSum(int n, int w)
{
    if(n==0 || w==0)
        dp[n][w]=0;
    if(dp[n][w]!=-1)
        return dp[n][w];
    if(W[n]>w)
        dp[n][w]=subsetSum(n-1,w);
    else
        dp[n][w]=max(W[n]+subsetSum(n-1,w-W[n]),subsetSum(n-1,w));
    return dp[n][w];
}
int main()
{
    //int t;
    //scanf("%d",&t);
    int n,w;
    scanf("%d",&n);
    while(n--)
    {
        char temp;
        int i=0,sum=0;
        do
        {
            i++;
            scanf("%d%c", &W[i], &temp);
            sum+=W[i];
        }while(temp != '\n');
        memset(dp,-1,sizeof(dp));
        if(sum%2!=0)
            printf("NO\n");
        else
        {
            int r = subsetSum(i,sum/2);
            if(r==sum/2)
                printf("YES\n");
            else
                printf("NO\n");
        }
    }
}
