#include <stdio.h>
#include<algorithm>
#include<cstring>
#include<vector>
#include<cmath>
using namespace std;
int dp[1125][20][205];
int W[205];
vector<int>A;


bool isPrime(int n)
{
    if(n<2) return false;
    if(n==2) return true;
    if(n%2==0) return false;
    int srt = sqrt(n);
    for(int i=3;i<=srt;i+=2)
    {
        if(n%i==0) return false;
    }
    return true;
}
int nextPrime(int n)
{
    while(!isPrime(++n));
    return n;
}
void primeGenerate()
{
    W[0]=2;
    int k=1;
    for(int i=2;i<=1120;)
    {
        W[k++]=nextPrime(i);
        i=W[k-1];
    }
}


int knapsack(int n,int k, int indx)
{
    if(n==0 && k==0)
        dp[n][k][indx]=1;
    else if(n==0 || k==0)
        dp[n][k][indx]=0;
    else if(W[indx]>n)
        dp[n][k][indx]=0;  // it should be dp[n][k][w]=knapsack(n,k,indx+1) if W is not sorted.
    if(dp[n][k][indx]!=-1)
        return dp[n][k][indx];
    dp[n][k][indx]=knapsack(n-W[indx],k-1,indx+1) + knapsack(n,k,indx+1);
    return dp[n][k][indx];
}

/* Driver program to test above functions */
int main()
{
    primeGenerate();
    int n,k;
    memset(dp,-1,sizeof(dp));
    while(1)
    {
        scanf("%d%d",&n,&k);
        if(n==0 && k==0)
            break;
        printf("%d\n",knapsack(n,k,0));
    }


    return 0;
}
